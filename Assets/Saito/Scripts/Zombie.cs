using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;
using System.Threading;
using System.Threading.Tasks;

public class Zombie : MonoBehaviour
{
    [SerializeField]//探知範囲
    float detection_range = 20.0f;
    [SerializeField]//掴む距離
    float grap_range = 1.0f;
    [SerializeField]//走る速度
    float run_speed = 6.0f;
    [SerializeField]//歩く速度
    float walk_speed = 1.0f;

    float random_walk_time = 0.0f;//ランダムウォークの目標時間用
    float random_walk_count = 0.0f;//ランダムウォークの時間計測用

    GameObject PlayerObj;//プレイヤー

    bool on_move_stop = false;//移動不可フラグ

    private readonly CancellationTokenSource _cancellationTokenSource =
            new CancellationTokenSource();

    private void Awake()
    {
        //プレイヤーの位置取得
        PlayerObj = GameObject.FindGameObjectWithTag("Player");

        on_move_stop = false;
    }

    // Update is called once per frame
    void Update()
    {
        if (on_move_stop) return;//移動不可なら処理しない

        //座標取得
        Vector3 pos = transform.position;
        Vector3 player_pos = PlayerObj.transform.position;
        //プレイヤーとの距離計算
        float player_distance = Vector3.Distance(pos, player_pos);

        
        if (player_distance <= detection_range)//プレイヤーとの距離が一定以下
        {
            //プレイヤーの方を向く
            transform.LookAt(PlayerObj.transform, transform.up);
            //向いている方向に移動
            transform.Translate(Vector3.forward * run_speed * Time.deltaTime);
        }        
        else//通常の動作
        {
            if(random_walk_count>=random_walk_time)
            {
                random_walk_count = 0.0f;//リセット
                random_walk_time = UnityEngine.Random.Range(4.0f, 8.0f);//次に向きを変えるまでの時間
                //ランダムに向きを変更
                Vector3 course = new Vector3(0, UnityEngine.Random.Range(0, 180), 0);
                transform.localRotation = Quaternion.Euler(course);
            }
            else
            {
                //時間カウント
                random_walk_count += Time.deltaTime;
            }
            //向いている方向に移動
            transform.Translate(Vector3.forward * walk_speed * Time.deltaTime);
        }

        if (player_distance <= grap_range)//掴みかかる距離
        {
            GrapPlayer();
        }
    }
    //プレイヤーをつかむ
    private void GrapPlayer()
    {
        on_move_stop = true;//移動停止


        // CancellationTokenを生成
        var token = _cancellationTokenSource.Token;


        //数秒後
        //この間にダメージを受けるなどでキャンセル
        DelayRunAsync(token, 3.0,
            () => BitePlayer() //噛みつく             
            );    
    }
    //プレイヤーに噛みつく
    private void BitePlayer()
    {
        //プレイヤーをゲームオーバーにする
        on_move_stop = false;
    }

    //体にダメージを受けた
    private void DamageBody()
    {
        //スタン
    }
    //頭にダメージを受けた
    private void DamageHead()
    {
        Dead();//死亡
    }
    //スタン
    private void Stan()
    {
        //のけぞるor一定時間停止
        _cancellationTokenSource.Dispose();
    }
    //死亡処理
    private void Dead()
    {

    }

    private async ValueTask DelayRunAsync(CancellationToken token, double wait_sec, Action action)
    {
        // ディレイ処理
        await Task.Delay(TimeSpan.FromSeconds(3), token);
        action();
    }
}
